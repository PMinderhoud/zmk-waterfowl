/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keypos.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Global settings */

#define QUICK_TAP_MS 175
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                              // thumb keys

/ {
    combos {
        compatible = "zmk,combos";

        Semicolon {
            bindings = <&kp SEMI>;
            key-positions = <27 28>;
            layers = <1 2>;
        };

        exclaim {
            bindings = <&kp EXCL>;
            key-positions = <26 27>;
        };

        dquot {
            bindings = <&kp DQT>;
            key-positions = <27 28>;
            layers = <0 4>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <23 22>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <22 21>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <20 21>;
        };

        backslash {
            bindings = <&kp BSLH>;
            key-positions = <29 28>;
        };

        isnot {
            bindings = <&isnot>;
            key-positions = <10 13>;
            layers = <4>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };
        capsword: capsword {
            compatible = "zmk,behavior-caps-word";
            label = "CAPSWORD";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE MINUS>;
        };

        easynew: easynew {
            compatible = "zmk,behavior-mod-morph";
            label = "EASYNEW";
            bindings = <&kp LC(N)>, <&kp N>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        easyclose: easyclose {
            compatible = "zmk,behavior-mod-morph";
            label = "EASYCLOSE";
            bindings = <&kp LC(F4)>, <&kp F4>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };
    };

    macros {
        smile: smile {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp COLON &kp MINUS &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "SMILE";
        };

        cmp: comp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&kp RALT &macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "COMP";
        };

        cmpu: compup {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&kp RALT &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;

            label = "COMPUP";
        };
        isnot: isnot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp S &kp SPACE &kp N &kp O &kp T &kp SPACE>;
            label = "ISNOT";
        };
        
        lambda: lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EQUAL &kp GT &kp SPACE>;
            label = "LAMBDA";
        };

        lambdablk: lambdablk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&lambda &kp LBRC &kp ENTER>;
            label = "LAMBDABLK";
        };

        zerozero: zerozero {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0>;
            label = "ZEROZERO";
        };

        zerozerozero: zerozerozero {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N0>;
            label = "ZEROZEROZERO";
        };

        qumacro: QuMacro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp Q>,
                <&macro_release>,
                <&kp LSHFT &kp RSHFT>,
                <&macro_tap>,
                <&kp U>;

            label = "QUMacro";
            wait-ms = <10>;
            tap-ms = <10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        recurva_layer {
            /* Recurva
 *
 * ,----------------------------------.                      ,----------------------------------.
 * |   F  |   R  |   D  |   P  |   V  |                      |   Q  |   M  |   U  |   O  |   Y  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   S  |   N  |   T  |   C  |   B  |                      |   .  |   H  |   E  |   A  |   I  |
 * |------+------+------+------+------|  ,-----.    ,-----.  |------+------+------+------+------|
 * |   Z  |   X  |   K  |   G  |   W  |  |  2  |    |  3  |  |   J  |   L  |   ;  |   '  |   ,  |
 * `----------------------------------'  `-----'    `-----'  `----------------------------------'
 *          ,-----.   ,--------------------.            ,--------------------.   ,-----.
 *          |  1  |   | DEL | SPACE | TAB  |            |  ESC  | BS | ENTER |   |  4  |
 *          `-----'   `--------------------'            `--------------------'   `-----'
 */

            bindings = <
&kp F       &kp R       &kp D        &kp P        &kp V     &kp Q    &kp M        &kp U        &kp O       &kp Y
&hml LGUI S  &hml LALT N  &hml LCTRL T  &hml LSHFT C   &kp B          &kp DOT        &hmr RSHFT H  &hmr RCTRL E  &hmr RALT A  &hmr RGUI I
&kp Z       &kp X       &kp K        &kp G        &kp W     &kp J    &kp L        &kp SEMI     &kp SQT     &kp COMMA
&kp N1      &lt 4 DEL   &lt 1 SPACE  &kp TAB      &kp N2    &kp N3   &kp ESC      &kp BSPC     &lt 0 RET   &kp N4
            >;

            sensor-bindings = <
                &inc_dec_kp PAGE_DOWN PAGE_UP
                &inc_dec_kp C_VOL_DN C_VOL_UP
                &inc_dec_kp DOWN UP
                &inc_dec_kp LEFT RIGHT
            >;
        };

        semimak_layer {
            /* Semimak JQZ
 *
 * ,----------------------------------.                      ,----------------------------------.
 * |   F  |   L  |   H  |   V  |   X  |                      |   '  |   W  |   U  |   O  |   Y  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   S  |   R  |   N  |   T  |   K  |                      |   C  |   D  |   E  |   A  |   I  |
 * |------+------+------+------+------|  ,-----.    ,-----.  |------+------+------+------+------|
 * |   Z  |   J  |   B  |   M  |   Q  |  |  2  |    |  3  |  |   P  |   G  |   ,  |   .  |   /  |
 * `----------------------------------'  `-----'    `-----'  `----------------------------------'
 *          ,-----.   ,--------------------.            ,--------------------.   ,-----.
 *          |  1  |   | DEL | SPACE | TAB  |            |  ESC  | BS | ENTER |   |  4  |
 *          `-----'   `--------------------'            `--------------------'   `-----'
 */

            bindings = <
&kp F       &kp L       &kp H        &kp V        &kp X     &kp SQT  &kp W        &kp U        &kp O       &kp Y
&hml LGUI S  &hml LALT R  &hml LCTRL N  &hml LSHFT T   &kp K          &kp C          &hmr RSHFT D  &hmr RCTRL E  &hmr RALT A  &hmr RGUI I
&kp Z       &kp J       &kp B        &kp M        &kp Q     &kp P    &kp G        &kp COMMA    &kp DOT     &kp FSLH
&kp N1      &lt 4 DEL   &lt 1 SPACE  &kp TAB      &kp N2    &kp N3   &kp ESC      &kp BSPC     &lt 0 RET   &kp N4
            >;

            sensor-bindings = <
                &inc_dec_kp PAGE_DOWN PAGE_UP
                &inc_dec_kp C_VOL_DN C_VOL_UP
                &inc_dec_kp DOWN UP
                &inc_dec_kp LEFT RIGHT
            >;
        };

        qwerty_layer {
            /* QWERTY
 *
 * ,----------------------------------.                      ,----------------------------------.
 * |   Q  |   W  |   E  |   R  |   T  |                      |   Y  |   U  |   I  |   O  |   P  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   A  |   S  |   D  |   F  |   G  |                      |   H  |   J  |   K  |   L  |   ;  |
 * |------+------+------+------+------|  ,-----.    ,-----.  |------+------+------+------+------|
 * |   Z  |   X  |   C  |   V  |   B  |  |  2  |    |  3  |  |   N  |   M  |   ,  |   .  |   /  |
 * `----------------------------------'  `-----'    `-----'  `----------------------------------'
 *          ,-----.   ,--------------------.            ,--------------------.   ,-----.
 *          |  1  |   | DEL | SPACE | TAB  |            |  ESC  | BS | ENTER |   |  4  |
 *          `-----'   `--------------------'            `--------------------'   `-----'
 */

            bindings = <
&kp Q       &kp W       &kp E        &kp R        &kp T     &kp Y   &kp U        &kp I        &kp O       &kp P
&mt LGUI A  &mt LALT S  &mt LCTRL D  &mt LSHFT F  &kp G     &kp H   &mt RSHFT J  &mt RCTRL K  &mt RALT L  &mt RGUI SEMI
&kp Z       &kp X       &kp C        &kp V        &kp B     &kp N   &kp M        &kp COMMA    &kp DOT     &kp FSLH
&kp N1      &lt 4 DEL   &lt 1 SPACE  &kp TAB      &kp N2    &kp N3  &kp ESC      &kp BSPC     &lt 0 RET   &kp N4
            >;

            sensor-bindings = <
                &inc_dec_kp PAGE_DOWN PAGE_UP
                &inc_dec_kp C_VOL_DN C_VOL_UP
                &inc_dec_kp DOWN UP
                &inc_dec_kp LEFT RIGHT
            >;
        };

        nav_layer {
            /* NAVNUM
 *
 * ,----------------------------------.                      ,----------------------------------.
 * |      | PgUp |  UP  | PgDn |      |                      |   /  |   7  |   8  |   9  |   -  |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * | Home | Left | Down | Right| End  |                      |   =  |   4  |   5  |   6  |   +  |
 * |------+------+------+------+------|  ,-----.    ,-----.  |------+------+------+------+------|
 * |      |      |  INS |      |      |  |  2  |    |  3  |  |   0  |   1  |   2  |   3  |   *  |
 * `----------------------------------'  `-----'    `-----'  `----------------------------------'
 *          ,-----.   ,--------------------.            ,--------------------.   ,-----.
 *          |  1  |   | DEL | SPACE | MO(3)|            |  ESC  | BS | ENTER |   |  4  |
 *          `-----'   `--------------------'            `--------------------'   `-----'
 */

            bindings = <
&trans    &trans     &trans       &easynew   &easyclose    &kp LG(V)        &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)
&kp LWIN  &kp LALT   &kp LCTRL    &kp LSHFT  &trans        &kp LC(A)        &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT
&trans    &trans     &trans       &trans     &trans        &kp PRINTSCREEN  &kp HOME   &kp PG_DN  &kp PG_UP  &kp END
&kp N1    &lt 4 DEL  &lt 1 SPACE  &kp TAB    &kp N2        &kp N3           &kp ESC    &kp BSPC   &lt 0 RET  &kp N4
            >;

            sensor-bindings = <
                &inc_dec_kp PAGE_DOWN PAGE_UP
                &inc_dec_kp C_VOL_DN C_VOL_UP
                &inc_dec_kp DOWN UP
                &inc_dec_kp LEFT RIGHT
            >;
        };

        symbol_layer {
            /* SYM
 *
 * ,----------------------------------.                      ,----------------------------------.
 * |   %  |   @  |   [  |   ]  |   \  |                      |      |      |   ^  |      |      |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |   #  |   !  |   (  |   )  |   |  |                      |   _  |   '  |   "  |   ~  |   `  |
 * |------+------+------+------+------|  ,-----.    ,-----.  |------+------+------+------+------|
 * |   $  |      |   {  |   }  |   &  |  |  2  |    |  3  |  |      |      |      |      |      |
 * `----------------------------------'  `-----'    `-----'  `----------------------------------'
 *          ,-----.   ,--------------------.            ,--------------------.   ,-----.
 *          |  1  |   | DEL | SPACE | TAB  |            |  ESC  | BS | ENTER |   |  4  |
 *          `-----'   `--------------------'            `--------------------'   `-----'
 */

            bindings = <
&kp PRCNT      &kp PLUS     &kp MINUS     &kp DOLLAR       &kp LBRC    &kp RBRC  &kp N7   &kp N8    &kp N9     &kp GRAVE
&mt LWIN EXCL  &mt LALT LT  &mt LCTRL GT  &mt LSHFT EQUAL  &kp LPAR    &kp RPAR  &kp N1   &kp N2    &kp N3     &kp N0
&kp CARET      &kp ASTRK    &kp SLASH     &kp UNDER        &kp LBKT    &kp RBKT  &kp N4   &kp N5    &kp N6     &kp DOT
&kp N1         &lt 4 DEL    &lt 1 SPACE   &kp TAB          &kp N2      &kp N3    &kp ESC  &kp BSPC  &lt 0 RET  &kp N4
            >;

            sensor-bindings =
                <&inc_dec_kp AMPS PIPE>,
                <&inc_dec_kp AMPS PIPE>,
                <&inc_dec_kp DOWN UP>,
                <&inc_dec_kp LEFT RIGHT>;
        };

        function_layer {
            /* FUNC
 *
 * ,----------------------------------.                      ,----------------------------------.
 * |      |      | BTCLR|      | Reset|                      | Reset|  F7  |  F8  |  F9  |  F11 |
 * |------+------+------+------+------|                      |------+------+------+------+------|
 * |  BT0 |  BT1 |  BT2 |  BT3 |  BT4 |                      |      |  F4  |  F5  |  F6  |  F12 |
 * |------+------+------+------+------|  ,-----.    ,-----.  |------+------+------+------+------|
 * |      |      |      |      |      |  |  2  |    |  3  |  |  F10 |  F1  |  F2  |  F3  |  F13 |
 * `----------------------------------'  `-----'    `-----'  `----------------------------------'
 *          ,-----.   ,--------------------.            ,--------------------.   ,-----.
 *          |  1  |   | DEL | SPACE | TAB  |            |  ESC  | BS | ENTER |   |  4  |
 *          `-----'   `--------------------'            `--------------------'   `-----'
 */

            bindings = <
&trans    &kp INS    &kp CLCK     &capsword  &trans    &trans  &kp F9   &kp F10   &kp F11    &kp F12
&kp LWIN  &kp LALT   &kp LCTRL    &kp LSHFT  &trans    &trans  &kp F5   &kp F6    &kp F7     &kp F8
&trans    &trans     &trans       &trans     &trans    &trans  &kp F1   &kp F2    &kp F3     &kp F4
&kp N1    &lt 4 DEL  &lt 1 SPACE  &kp TAB    &kp N2    &kp N3  &kp ESC  &kp BSPC  &lt 0 RET  &kp N4
            >;

            sensor-bindings = <
                &inc_dec_kp PAGE_DOWN PAGE_UP
                &inc_dec_kp C_VOL_DN C_VOL_UP
                &inc_dec_kp DOWN UP
                &inc_dec_kp LEFT RIGHT
            >;
        };

        adjust_layer {
            bindings = <
&bootloader   &sys_reset    &none         &bt BT_CLR    &bt BT_CLR_ALL    &bootloader  &sys_reset  &none  &none  &none
&none         &none         &bt BT_PRV    &bt BT_NXT    &none             &none        &to 0       &to 1  &to 2  &none
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &none        &none       &none  &none  &none
&none         &none         &none         &none         &none             &none        &none       &none  &none  &none
            >;
        };

        altsym_layer {
            bindings = <
&kp LS(PRCNT)  &kp LS(PLUS)  &kp MINUS   &kp LS(DLLR)   &kp GRAVE      &kp LS(TILDE)  &kp LS(AT)    &kp LS(POUND)  &kp LS(QMARK)  &kp BSLH
&kp LS(EXCL)   &kp LS(LT)    &kp LS(GT)  &kp EQUAL      &kp LS(DQT)    &kp LS(AMPS)   &kp LS(LBRC)  &kp LS(LPAR)   &kp LBKT       &kp DOT
&kp LS(CARET)  &kp LS(STAR)  &kp FSLH    &kp LS(UNDER)  &kp SQT        &kp LS(PIPE)   &kp LS(RBRC)  &kp LS(RPAR)   &kp RBKT       &kp COMMA
&trans         &trans        &trans      &trans         &trans         &trans         &trans        &trans         &trans         &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjustlayer {
            if-layers = <3 5>;
            then-layer = <6>;
        };
    };
};
